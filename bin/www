#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('graphql-server:server');
const { ApolloServer } = require('apollo-server-express');
const { Schema } = require('../graphql/rootSchema');
const DataLoader = require('dataloader');
const { default: axios } = require('axios');
const groupBy = require('lodash.groupby');

let times = 0;

(async function () {
  /**
   * Get port from environment and store in Express.
   */

  const server = new ApolloServer({
    schema: Schema,
    playground: true,
    context: () => {
      return {
        authorLoader: new DataLoader(async (keys) => {
          const query = keys.reduce((acc, current, index) => {
            return `${acc}${index === 0 ? '' : '&'}id=${current}`;
          }, '');
          const { data: authors } = await axios.get(
            `http://localhost:3004/authors?${query}`
          );

          const authorMap = {};
          authors.forEach((author) => {
            authorMap[author.id] = author;
          });

          return keys.map((key) => {
            return authorMap[key];
          });
        }),
        bookLoader: new DataLoader(async (keys) => {
          const query = keys.reduce((acc, current, index) => {
            return `${acc}${index === 0 ? '' : '&'}authorId=${current}`;
          }, '');
          const { data: books } = await axios.get(
            `http://localhost:3004/books?${query}`
          );

          const groupedBooks = groupBy(books, (book) => book.authorId);

          return keys.map((key) => {
            return groupedBooks[key];
          });
        }),
      };
    },
  });

  await server.start();

  server.applyMiddleware({ app });

  app.use((req, res) => {
    res.status(200);
    res.send('Hello!');
    res.end();
  });

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  await new Promise((resolve) => app.listen({ port }, resolve));
  console.log(
    `ğŸš€ Server ready at http://localhost:${port}${server.graphqlPath}`
  );
})();

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
